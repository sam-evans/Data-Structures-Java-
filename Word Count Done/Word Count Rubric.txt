Terrance Torrance presented a model on Creativity Analysis in which one portion describes “Unique Word Count” – a concept also used in the speller-module of any good word processor. In this program, you are going to write a program to do a creativity analysis based on the unique word count. 

Required parameters: 

A file containing a paragraph… 
A real paragraph with upper and lower case characters and punctuation 
All words may be assumed to be spelled correctly 
No hyphenated words (for simplicity) 
White space shall be defined (for this program) as a blank space, a blank and its preceding punctuation, and non-printable characters (like \n) 
Output file reporting on the creativity of the paragraph 
No direct contact with the user – the user will simply run the program with the name of the file as a runtime parameter and you will create the report. 
See the BPJ book for writing to a file.
Program details: 

Complete the List class and test it using the ListTest code. (both are on the Assignments page, along with the Node class)
Read the paragraph  
Create a linked list (using your List class) of unique words and how often each word appears   (So you’ll need a simple Word class to hold both values then make the list of that.)
Calculate a creativity ratio for the paragraph: (# unique words) / (total # words) 
Create a formatted report file that lists the words and their counts followed by the creativity ratio. 
Extension: Output the words in order by how often they appear (hint: use a sorting algorithm, not brute force!) 